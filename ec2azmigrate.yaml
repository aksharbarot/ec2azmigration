---
- hosts: localhost
  connection: local
  gather_facts: yes
  become: no

  tasks:

    - name: Display the availble timestamp format in Ansible
      debug:
        var: ansible_date_time

    - name: Gathering the facts...
      ec2_instance_info:
        region: us-east-1
        instance_ids: "{{ ecid }}"
      register: ec2_facts

    - name:
      debug:
              var: ec2_facts | json_query('instances[].security_groups[].group_name')

    - local_action: shell aws --profile myaccesskey ec2 describe-instances --instance-ids "{{ ecid }}" | jq -r '.[][]|.Instances[].NetworkInterfaces[].Groups[].GroupName' > /tmp/secgroups && sed ':b;$!{N;bb};s/\n/,/g' /tmp/secgroups
      register: testaxar
      when: ec2_facts.instances[0].state.name == 'stopped'

    - name:
      debug:
         var: testaxar.stdout_lines

    - name: Basic AMI Creation
      ec2_ami:
       instance_id: "{{ ecid }}"
       wait: yes
       wait_timeout: 1200
       name: AZ-Migration-{{ ansible_date_time.iso8601_basic_short }}
       tags:
          Name: AZ-Migration-{{ ansible_date_time.iso8601_basic_short }}
          Service: AZ Migration
      register: test
      when: ec2_facts.instances[0].state.name == "stopped"

    - name:
      debug:
       var: test.image_id

    - ec2_ami_copy:
        source_region: us-east-1
        name: AZ-Migrated-Encrypted-{{ ansible_date_time.iso8601_basic_short }}
        region: us-east-1
        wait: yes
        wait_timeout: 1200
        source_image_id: "{{ test.image_id }}"
        encrypted: yes
      register: test1
      when: ec2_facts.instances[0].state.name == "stopped"

    - ec2:
        key_name: test-key
        instance_type: "{{ moffering }}"
        image: "{{ test1.image_id }}"
        wait: yes
        group: '{{testaxar.stdout}}'
        count: 1
        vpc_subnet_id: "{{ zsubnet }}"
        assign_public_ip: no
        region: us-east-1
        zone: "{{ ezone }}"
        instance_tags:
          name: "{{ tag1 }}"
          Application: "{{ tag2 }}"
          Application_Owner: "{{ tag3 }}"
          Environment: "{{ tag4 }}"
          Business_Owner: "{{ tag5 }}"
          IT_Owner: "{{ tag6 }}"
          Business_Unit: "{{ tag7 }}"
          Support_Team: "{{ tag8 }}"
          Billing: "{{ tag9 }}"
          Operating_System: "{{ tag10 }}"
          Domain: "{{ tag11 }}"
          Sub_Application: "{{ tag12 }}"
          'Business Consumer': "{{ tag13 }}"
          Department: "{{ tag14 }}"
          CostCenter: "{{ tag15 }}"
      register: newec2
      when: ec2_facts.instances[0].state.name == "stopped"

    - name: Gathering the facts...
      ec2_instance_info:
        region: us-east-1
        instance_ids: "{{ newec2.instance_ids }}"
      register: ec2f
      when: ec2_facts.instances[0].state.name == "stopped"


    - name: Tagging the instance...
      ec2_tag:
       region: us-east-1
       state: present
       resource: "{{ item.volume_id }}"
       tags:
          name: "{{ tag1 }}"
          Application: "{{ tag2 }}"
          Application_Owner: "{{ tag3 }}"
          Environment: "{{ tag4 }}"
          Business_Owner: "{{ tag5 }}"
          IT_Owner: "{{ tag6 }}"
          Business_Unit: "{{ tag7 }}"
          Support_Team: "{{ tag8 }}"
          Billing: "{{ tag9 }}"
          Operating_System: "{{ tag10 }}"
          Domain: "{{ tag11 }}"
          Sub_Application: "{{ tag12 }}"
          'Business Consumer': "{{ tag13 }}"
          Department: "{{ tag14 }}"
          CostCenter: "{{ tag15 }}"
      with_items: "{{ ec2f | json_query('instances[0].block_device_mappings[].ebs') }}"
      when: ec2_facts.instances[0].state.name == "stopped"

    - ec2_ami:
        image_id: "{{ test.image_id }}"
        delete_snapshot: True
        state: absent
      when: ec2_facts.instances[0].state.name == "stopped"
